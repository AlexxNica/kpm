"use strict";var app=angular.module("kpm-ui",["ngCookies","ngMaterial","ui.router"]);app.config(function($stateProvider,$urlRouterProvider,$mdThemingProvider){$stateProvider.state("home",{url:"/home",title:"Welcome to KPM",controller:"HomeController",templateUrl:"app/modules/home/home.html"}).state("packages",{url:"/packages?search",title:"Package list",controller:"PackageListController",templateUrl:"app/modules/packages/list.html"}).state("package",{url:"/package/{name:any}",title:"Package detail",controller:"PackageController",templateUrl:"app/modules/packages/package.html"}).state("organization",{url:"/organization/{name}",title:"Organization detail",controller:"OrganizationController",templateUrl:"app/modules/organization/organization.html"}).state("user",{url:"/user/{username}",title:"User",controller:"UserController",templateUrl:"app/modules/user/user.html"}).state("settings",{url:"/settings",controller:"SettingsController",templateUrl:"app/modules/settings/settings.html","abstract":!0,onEnter:function($state,Session){Session.isAuthenticated()||$state.go("login")}}).state("settings.profile",{url:"/profile",controller:"SettingsProfileController",templateUrl:"app/modules/settings/profile.html"}).state("settings.tokens",{url:"/tokens",controller:"SettingsTokensController",templateUrl:"app/modules/settings/tokens.html"}).state("settings.organizations",{url:"/organizations",controller:"SettingsOrganizationsController",templateUrl:"app/modules/settings/organizations.html"}).state("login",{url:"/login",title:"Login",controller:"LoginController",templateUrl:"app/modules/user/login.html"}).state("signup",{url:"/signup",title:"Create an account",controller:"SignupController",templateUrl:"app/modules/user/signup.html"}).state("error404",{url:"/404",templateUrl:"app/modules/errors/404.html"}),$urlRouterProvider.when("","/home").otherwise("404"),$mdThemingProvider.theme("default").primaryPalette("blue-grey")}),app.controller("AppController",function($rootScope,$sce,Session){$rootScope.config=Config,$rootScope.session=Session,$rootScope.$on("$stateChangeSuccess",function(event,toState){$rootScope.stateName=toState.name,$rootScope.pageTitle=$sce.trustAsHtml("KPM | "+toState.title)}),$rootScope.ui={loading:!1},$rootScope.build_error=function(data){var string=data&&data.hasOwnProperty("error")?data.error.message+": "+data.error.details:"Someting went wrong";return string+" (╯°□°）╯︵ ┻━┻)"},Session.connectFromCookie()}),app.directive("prism",function(){return{restrict:"A",scope:{prism:"@"},link:function(scope,element){element.addClass("language-"+scope.prism),element.ready(function(){Prism.highlightElement(element[0])})}}}),app.factory("Package",function(KpmApi){function Package(hash){for(var key in hash)this[key]=hash[key];var index=this.name.indexOf("/");this.organization=this.name.substr(0,index),this.appname=this.name.substr(index+1),this.icon_url="http://lorempixel.com/100/100/cats"}return Package}),app.factory("User",function(KpmApi){function User(hash){for(var key in hash)this[key]=hash[key];this.setGravatarUrl()}return User.prototype.setGravatarUrl=function(){if(this.email){var hash=Crypto.MD5(this.email.toLowerCase());this.gravatar="http://www.gravatar.com/avatar/"+hash}},User}),app.service("KpmApi",function($http){this.get=function(target,params){return this.perform("GET",target,{params:angular.copy(params),paramSerializer:"$httpParamSerializerJQLike"})},this.post=function(target,params){return this.perform("POST",target,{data:params})},this.put=function(target,params){return this.perform("PUT",target,{data:params})},this["delete"]=function(target){return this.perform("DELETE",target,{})},this.perform=function(method,target,config){return config.url=Config.backend_url+target,config.method=method,this.authentication_token&&(config.headers={Authorization:this.authentication_token}),$http(config)}}),app.service("Session",function($rootScope,$cookies,$state,KpmApi,User){var self=this;this.connectFromCookie=function(){var token=$cookies.get("authentication_token");token&&(console.log("[Session] token "+token+" found in cookie, checking status..."),KpmApi.authentication_token=token,KpmApi.get("account/status").success(function(data){console.log("[Session] token is valid, logged as "+data.username),self.user=new User(data)}).error(function(data){delete KpmApi.authentication_token,console.log("[Session] Token rejected.")}))},this.login=function(username,password){KpmApi.post("users/login",{user:{username:username,password:password}}).success(function(data){self.user=new User(data),KpmApi.authentication_token=data.token,$cookies.put("authentication_token",data.token),$rootScope.$broadcast("login_success",data)}).error(function(data){delete KpmApi.authentication_token,$rootScope.$broadcast("login_failure",data)})},this.logout=function(){KpmApi["delete"]("users/logout").success(function(data){delete self.user,delete KpmApi.authentication_token,$cookies.remove("authentication_token"),$state.go("home")}).error(function(data){})},this.isAuthenticated=function(){return null!=KpmApi.authentication_token},this.isCurrent=function(token){return KpmApi.authentication_token===token.authentication_token}}),app.controller("OrganizationController",function($scope,$stateParams,KpmApi,User){$scope.loadOrganization=function(name){KpmApi.get("organizations/"+name).success(function(data){$scope.organization=data}).error(function(data){$scope.error=$scope.build_error(data)}),KpmApi.get("/organizations/"+name+"/users").success(function(data){$scope.users=data.map(function(hash){return new User(hash)})}).error(function(data){$scope.error=$scope.build_error(data)})},$scope.loadOrganization($stateParams.name)}),app.controller("HomeController",function($scope,KpmApi){$scope.countPackages=function(){KpmApi.get("packages/count").success(function(data){$scope.count=data.count}).error(function(){})},$scope.countPackages()}),app.controller("PackageController",function($scope,$state,$stateParams,$mdDialog,KpmApi,Package,Session){$scope.selectVersion=function(){var name=$scope["package"].name+"/"+$scope["package"].version;$state.go("package",{name:name})},$scope.toggleStar=function(){if(Session.isAuthenticated()){var action=$scope["package"].starred?"unstar":"star";KpmApi.put("packages/"+$scope["package"].name+"/"+action).success(function(data){$scope["package"].starred=!$scope["package"].starred,$scope["package"].stars=data.stars}).error(function(){console.log("Cannot "+action+" package")})}else $state.go("login")},$scope.toggleResource=function(resource){resource.content?delete resource.content:KpmApi.get("packages/"+$scope["package"].name+"/file/templates/"+resource.file).success(function(data){resource.content=data})},$scope.downloadTarball=function(ev){var confirm=$mdDialog.prompt().title("Select namespace").textContent("The name of your Kubernetes namespace.").placeholder("namespace").targetEvent(ev).ok("Download").cancel("Cancel");$mdDialog.show(confirm).then(function(result){var url=Config.backend_url+"packages/"+$scope["package"].name+"/generate-tar?version="+$scope["package"].version+"&namespace="+result;window.location=url},function(){})},$scope.setPackage=function(object){$scope["package"]=new Package(object)};var package_name=$stateParams.name;if(package_name){var sp=package_name.split("/"),version=null;sp.length>2&&(version=sp[2],package_name=sp[0]+"/"+sp[1]),$scope.ui.loading=!0,KpmApi.get("packages/"+package_name,{version:version}).success(function(data){$scope.ui.loading=!1,$scope.setPackage(data)}).error(function(data){$scope.ui.loading=!1,$scope.error=$scope.build_error(data)})}}),app.controller("PackageListController",function($scope,$stateParams,KpmApi,Package){$scope.availableSorts={Downloads:{sort_descending:!0,sort_order:"downloads",icon:"download"},Stars:{sort_descending:!0,sort_order:"stars",icon:"star"},"Last update":{sort_descending:!0,sort_order:"updated_at",icon:"clock-o"},Name:{sort_order:"default",icon:"font"}},$scope.selectedSort=$scope.availableSorts.Downloads,$scope.queryParams={},$scope.getPackages=function(){console.log($scope.queryParams),KpmApi.get("packages",$scope.queryParams).success(function(data){$scope.ui.loading=!1,$scope.packages=data}).error(function(data){$scope.error=$scope.build_error(data),$scope.ui.loading=!1})},$scope.applySort=function(querySort){$scope.queryParams.sort_order=querySort.sort_order,$scope.queryParams.sort_descending=querySort.sort_descending,$scope.getPackages()},$stateParams.search&&($scope.queryParams.named_like=$stateParams.search),$scope.applySort($scope.selectedSort)}),app.controller("SearchController",function($scope,$state,$q,KpmApi){this.submit=function(){$state.go("packages",{search:this.searchText}),this.searchText=null},this.itemSelected=function(item){item&&($state.go("package",{name:item}),this.searchText=null)},this.querySearch=function(search){var deferred=$q.defer();return KpmApi.get("packages/search",{q:search}).success(function(data){deferred.resolve(data)}),deferred.promise}}),app.controller("SettingsOrganizationsController",function($scope){}),app.controller("SettingsProfileController",function($scope){}),app.controller("SettingsController",function($scope){}),app.controller("SettingsTokensController",function($scope,KpmApi){$scope.loadTokens=function(){KpmApi.get("account/tokens").success(function(data){$scope.tokens=data}).error(function(){})},$scope.deleteToken=function(token){},$scope.loadTokens()}),app.controller("LoginController",function($scope,$state,KpmApi,Session){$scope.$on("login_success",function(event,data){$scope.ui.loading=!1,$state.go("user",{username:Session.user.username})}),$scope.$on("login_failure",function(event,data){$scope.ui.loading=!1,$scope.error=$scope.build_error(data)}),$scope.submit=function(){$scope.ui.loading=!0,Session.login($scope.username,$scope.password)}}),app.controller("SignupController",function($scope,$state,KpmApi,Session,User){$scope.submit=function(){$scope.ui.loading=!0,KpmApi.post("users",{user:{username:$scope.username,email:$scope.email,password:$scope.password,password_confirmation:$scope.password_confirmation}}).success(function(data){$scope.ui.loading=!1,Session.user=new User(data),KpmApi.authorization_token=data.token,$state.go("home")}).error(function(data){if($scope.ui.loading=!1,data&&data.errors){$scope.errors=[];for(key in data.errors)$scope.errors.push(key+" "+data.errors[key].join(" "))}else $scope.errors=["Oh no, something wrong happened!"]})}}),app.controller("UserController",function($scope,$stateParams,KpmApi,User){$scope.loadUser=function(username){KpmApi.get("users/"+username).success(function(data){$scope.user=new User(data),KpmApi.get("packages",{username:username}).success(function(data){$scope.user.packages=data}).error(function(data){console.log("[User] cannot get packages")})}).error(function(data){$scope.error="User not found"})},$scope.loadUser($stateParams.username)});